/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RulesPanel.java
 *
 * Created on Aug 7, 2012, 7:26:57 PM
 */

package lcs.ui.panels;

import java.util.Vector;
import lcs.model.*;

/**
 *
 * @author Timothy
 */
public class RulesPanel extends javax.swing.JPanel {

    /** Creates new form RulesPanel */
    public RulesPanel() {
        initComponents();
        System.out.println("getting Pos rules");
        lcsPosRules1 = lcsMain1.getPosRules();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lcsMain1 = new lcs.lcsMain();
        lcsPosRules1 = new lcs.model.lcsPosRules();
        jScrollPane1 = new javax.swing.JScrollPane();
        posRulesTable = new javax.swing.JTable();
        syllablePatternLabel = new javax.swing.JLabel();
        partOfSpeechLabel = new javax.swing.JLabel();
        syllablePatternField = new javax.swing.JTextField();
        maxSyllablesLabel = new javax.swing.JLabel();
        maxSyllablesSpinner = new javax.swing.JSpinner();
        updatePosRulesTableButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        declensionTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        conjugationTable = new javax.swing.JTable();
        declensionLabel = new javax.swing.JLabel();
        conjugationLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        posRulesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Adjective", null, null, new Integer(-1), null, null},
                {"Adverb", null, null, new Integer(-1), null, null},
                {"Article", null, null, new Integer(-1), null, null},
                {"Conjunction", null, null, new Integer(-1), null, null},
                {"Interjection", null, null, new Integer(-1), null, null},
                {"Noun", null, null, new Integer(-1), null, null},
                {"Preposition", null, null, new Integer(-1), null, null},
                {"Pronoun", null, null, new Integer(-1), null, null},
                {"Verb", null, null, new Integer(-1), null, null}
            },
            new String [] {
                "PoS", "Enabled", "Rule", "Excep %", "Prefix/Suffix", "Add/Replace"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        posRulesTable.setPreferredSize(new java.awt.Dimension(450, 148));
        posRulesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                posRulesTableMouseClicked(evt);
            }
        });
        posRulesTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                posRulesTableKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(posRulesTable);
        posRulesTable.getColumnModel().getColumn(0).setResizable(false);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.51;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 10);
        add(jScrollPane1, gridBagConstraints);

        syllablePatternLabel.setText("Syllable Pattern");
        syllablePatternLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.01;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        add(syllablePatternLabel, gridBagConstraints);

        partOfSpeechLabel.setText("Part of Speech Rules");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        add(partOfSpeechLabel, gridBagConstraints);

        syllablePatternField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syllablePatternFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(6, 11, 0, 0);
        add(syllablePatternField, gridBagConstraints);

        maxSyllablesLabel.setText("Maximum # Syllables");
        maxSyllablesLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        add(maxSyllablesLabel, gridBagConstraints);

        maxSyllablesSpinner.setModel(new javax.swing.SpinnerNumberModel(3, 2, 5, 1));
        maxSyllablesSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxSyllablesSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.59;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        add(maxSyllablesSpinner, gridBagConstraints);

        updatePosRulesTableButton.setText("Update");
        updatePosRulesTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePosRulesTableButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        add(updatePosRulesTableButton, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        declensionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Person", "Singular", "Plural"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        declensionTable.setEnabled(false);
        jScrollPane2.setViewportView(declensionTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        jPanel1.add(jScrollPane2, gridBagConstraints);

        conjugationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Case", "Singular", "Plural"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        conjugationTable.setEnabled(false);
        jScrollPane3.setViewportView(conjugationTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        jPanel1.add(jScrollPane3, gridBagConstraints);

        declensionLabel.setText("Noun Declension");
        declensionLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(declensionLabel, gridBagConstraints);

        conjugationLabel.setText("Verb Conjugation");
        conjugationLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(conjugationLabel, gridBagConstraints);

        jLabel1.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        jPanel1.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.34;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void maxSyllablesSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxSyllablesSpinnerStateChanged
        Integer i=(Integer)maxSyllablesSpinner.getValue();
        lcsMain1.setMaximumSyllables(i.intValue());
    }//GEN-LAST:event_maxSyllablesSpinnerStateChanged

    private void syllablePatternFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syllablePatternFieldActionPerformed
        lcs.model.lcsSyllableStructure syl = new lcs.model.lcsSyllableStructure(
                syllablePatternField.getText());
        lcsMain1.setSyllable(syl);
    }//GEN-LAST:event_syllablePatternFieldActionPerformed

    private void posRulesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_posRulesTableMouseClicked
        int row = posRulesTable.getSelectedRow();
        int col = posRulesTable.getSelectedColumn();
        if(col == 2){
            try{
                String rule = (String)posRulesTable.getValueAt(row, col);
                int a = -1;
                while((a = rule.indexOf("\\u",a+1))>=0){
                    String unicodeString = rule.substring(a + 2,a + 6);
                    char uniChar = (char)Integer.parseInt(unicodeString, 16);
                    rule = rule.substring(0, a) +
                        uniChar + rule.substring(a+6);
                    posRulesTable.setValueAt(rule, row, col);
                }
            }
            catch(NullPointerException ex){

            }
        }
        Vector values = new Vector();
        values.add(posRulesTable.getValueAt(row, 1));
        values.add(posRulesTable.getValueAt(row, 2));
        values.add(posRulesTable.getValueAt(row, 3));
        values.add(posRulesTable.getValueAt(row, 4));
        values.add(posRulesTable.getValueAt(row, 5));
        lcsPosRules1.put((String)posRulesTable.getValueAt(row, 0), values);
    }//GEN-LAST:event_posRulesTableMouseClicked

    private void posRulesTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_posRulesTableKeyTyped
        int row = posRulesTable.getSelectedRow();
        int col = posRulesTable.getSelectedColumn();
        if(evt.getKeyChar() == '\n'){
            if(col == 2){
                try{
                    String rule = (String)posRulesTable.getValueAt(oldrow, oldcol);
                    int a = -1;
                    while((a = rule.indexOf("\\u", a + 1)) >= 0){
                        String unicodeString = rule.substring(a + 2,a + 6);
                        char uniChar = (char)Integer.parseInt(unicodeString, 16);
                        rule = rule.substring(0, a) +
                            uniChar + rule.substring(a+6);
                        posRulesTable.setValueAt(rule, oldrow, oldcol);
                    }
                }
                catch(NullPointerException ex){

                }
            }
        } else {
            oldcol = col;
            oldrow = row;
        }
    }//GEN-LAST:event_posRulesTableKeyTyped

    private void updatePosRulesTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePosRulesTableButtonActionPerformed
        Vector values = new Vector();
        //lcsPosRules1 = lcsMain1.getPosRules();
        System.out.println();
        for(int row =0; row < 9;row ++){
            values.clear();
            values.add(posRulesTable.getValueAt(row, 1));
            values.add(posRulesTable.getValueAt(row, 2));
            values.add(posRulesTable.getValueAt(row, 3));
            values.add(posRulesTable.getValueAt(row, 4));
            values.add(posRulesTable.getValueAt(row, 5));
            lcsPosRules1.put((String)posRulesTable.getValueAt(row, 0), values);
            System.out.println(lcsPosRules1.get((String)posRulesTable.getValueAt(row, 0)));
        }
    }//GEN-LAST:event_updatePosRulesTableButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        Vector posValues = new Vector();
        String[] rows = {"Adjective","Adverb","Article","Conjunction",
                         "Interjection","Noun","Preposition","Pronoun","Verb"};
        //lcsPosRules lcpr = lcsMain1.getPosRules();
        for(int row = 0; row < 9; row ++){
            posValues = (Vector)lcsPosRules1.get(rows[row]);
            System.out.println(posValues);
            posRulesTable.setValueAt(((Boolean)posValues.get(0)).booleanValue(), row, 1);
            posRulesTable.setValueAt(posValues.get(1),row,2);
            posRulesTable.setValueAt(((Integer)posValues.get(2)).intValue(), row, 3);
            posRulesTable.setValueAt(((Boolean)posValues.get(3)).booleanValue(), row, 4);
            posRulesTable.setValueAt(((Boolean)posValues.get(4)).booleanValue(), row, 5);
            //posValues.clear();
        }
        syllablePatternField.setText(lcsMain1.getSyllableStructure().toString());
    }//GEN-LAST:event_formComponentShown

    public void setMain(lcs.lcsMain lcsm){
        lcsMain1=lcsm;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel conjugationLabel;
    private javax.swing.JTable conjugationTable;
    private javax.swing.JLabel declensionLabel;
    private javax.swing.JTable declensionTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private lcs.lcsMain lcsMain1;
    private lcs.model.lcsPosRules lcsPosRules1;
    private javax.swing.JLabel maxSyllablesLabel;
    private javax.swing.JSpinner maxSyllablesSpinner;
    private javax.swing.JLabel partOfSpeechLabel;
    private javax.swing.JTable posRulesTable;
    private javax.swing.JTextField syllablePatternField;
    private javax.swing.JLabel syllablePatternLabel;
    private javax.swing.JButton updatePosRulesTableButton;
    // End of variables declaration//GEN-END:variables
    private int oldrow;
    private int oldcol;
}
