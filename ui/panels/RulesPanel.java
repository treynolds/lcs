/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RulesPanel.java
 *
 * Created on Aug 7, 2012, 7:26:57 PM
 */

package lcs.ui.panels;

import java.util.Vector;
import lcs.model.*;

/**
 *
 * @author Timothy
 */
public class RulesPanel extends javax.swing.JPanel {

    /** Creates new form RulesPanel */
    public RulesPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lcsMain1 = new lcs.lcsMain();
        lcsPosRules1 = new lcs.model.lcsPosRules();
        jScrollPane1 = new javax.swing.JScrollPane();
        posRulesTable = new javax.swing.JTable();
        syllablePatternLabel = new javax.swing.JLabel();
        partOfSpeechLabel = new javax.swing.JLabel();
        syllablePatternField = new javax.swing.JTextField();
        maxSyllablesLabel = new javax.swing.JLabel();
        maxSyllablesSpinner = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        declensionTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        conjugationTable = new javax.swing.JTable();
        declensionLabel = new javax.swing.JLabel();
        conjugationLabel = new javax.swing.JLabel();
        updatePosRulesTableButton = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        posRulesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Adjective", null, null, new Integer(-1), null, null},
                {"Adverb", null, null, new Integer(-1), null, null},
                {"Article", null, null, new Integer(-1), null, null},
                {"Conjunction", null, null, new Integer(-1), null, null},
                {"Interjection", null, null, new Integer(-1), null, null},
                {"Noun", null, null, new Integer(-1), null, null},
                {"Preposition", null, null, new Integer(-1), null, null},
                {"Verb", null, null, new Integer(-1), null, null}
            },
            new String [] {
                "PoS", "Enabled", "Rule", "Excep %", "Prefix/Suffix", "Add/Replace"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        posRulesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                posRulesTableMouseClicked(evt);
            }
        });
        posRulesTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                posRulesTableKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(posRulesTable);
        posRulesTable.getColumnModel().getColumn(0).setResizable(false);
        posRulesTable.getColumnModel().getColumn(0).setHeaderValue("PoS");
        posRulesTable.getColumnModel().getColumn(1).setHeaderValue("Enabled");
        posRulesTable.getColumnModel().getColumn(2).setHeaderValue("Rule");
        posRulesTable.getColumnModel().getColumn(3).setHeaderValue("Excep %");
        posRulesTable.getColumnModel().getColumn(4).setHeaderValue("Prefix/Suffix");
        posRulesTable.getColumnModel().getColumn(5).setHeaderValue("Add/Replace");

        syllablePatternLabel.setText("Syllable Pattern");

        partOfSpeechLabel.setText("Part of Speech Rules");

        syllablePatternField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syllablePatternFieldActionPerformed(evt);
            }
        });

        maxSyllablesLabel.setText("Maximum # Syllables");

        maxSyllablesSpinner.setModel(new javax.swing.SpinnerNumberModel(3, 2, 5, 1));
        maxSyllablesSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxSyllablesSpinnerStateChanged(evt);
            }
        });

        declensionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Person", "Singular", "Plural"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        declensionTable.setEnabled(false);
        jScrollPane2.setViewportView(declensionTable);

        conjugationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Case", "Singular", "Plural"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        conjugationTable.setEnabled(false);
        jScrollPane3.setViewportView(conjugationTable);

        declensionLabel.setText("Noun Declension");
        declensionLabel.setEnabled(false);

        conjugationLabel.setText("Verb Conjugation");
        conjugationLabel.setEnabled(false);

        updatePosRulesTableButton.setText("Update");
        updatePosRulesTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePosRulesTableButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(partOfSpeechLabel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(declensionLabel)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(conjugationLabel)
                                .addGap(177, 177, 177))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(syllablePatternLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(syllablePatternField, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(maxSyllablesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxSyllablesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 208, Short.MAX_VALUE)
                        .addComponent(updatePosRulesTableButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(partOfSpeechLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(syllablePatternLabel)
                            .addComponent(syllablePatternField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxSyllablesLabel)
                            .addComponent(maxSyllablesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updatePosRulesTableButton)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(declensionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(conjugationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void maxSyllablesSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxSyllablesSpinnerStateChanged
        Integer i=(Integer)maxSyllablesSpinner.getValue();
        lcsMain1.setMaximumSyllables(i.intValue());
    }//GEN-LAST:event_maxSyllablesSpinnerStateChanged

    private void syllablePatternFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syllablePatternFieldActionPerformed
        lcs.model.lcsSyllableStructure syl = new lcs.model.lcsSyllableStructure(
                syllablePatternField.getText());
        lcsMain1.setSyllable(syl);
    }//GEN-LAST:event_syllablePatternFieldActionPerformed

    private void posRulesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_posRulesTableMouseClicked
        int row = posRulesTable.getSelectedRow();
        int col = posRulesTable.getSelectedColumn();
        if(col == 2){
            try{
                String rule = (String)posRulesTable.getValueAt(row, col);
                int a = -1;
                while((a = rule.indexOf("\\u",a+1))>=0){
                    String unicodeString = rule.substring(a + 2,a + 6);
                    char uniChar = (char)Integer.parseInt(unicodeString, 16);
                    rule = rule.substring(0, a) +
                        uniChar + rule.substring(a+6);
                    posRulesTable.setValueAt(rule, row, col);
                }
            }
            catch(NullPointerException ex){

            }
        }
        Vector values = new Vector();
        values.add(posRulesTable.getValueAt(row, 1));
        values.add(posRulesTable.getValueAt(row, 2));
        values.add(posRulesTable.getValueAt(row, 3));
        values.add(posRulesTable.getValueAt(row, 4));
        values.add(posRulesTable.getValueAt(row, 5));
        lcsPosRules1.put((String)posRulesTable.getValueAt(row, 0), values);
    }//GEN-LAST:event_posRulesTableMouseClicked

    private void posRulesTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_posRulesTableKeyTyped
        int row = posRulesTable.getSelectedRow();
        int col = posRulesTable.getSelectedColumn();
        if(evt.getKeyChar() == '\n'){
            if(col == 2){
                try{
                    String rule = (String)posRulesTable.getValueAt(oldrow, oldcol);
                    int a = -1;
                    while((a = rule.indexOf("\\u", a + 1)) >= 0){
                        String unicodeString = rule.substring(a + 2,a + 6);
                        char uniChar = (char)Integer.parseInt(unicodeString, 16);
                        rule = rule.substring(0, a) +
                            uniChar + rule.substring(a+6);
                        posRulesTable.setValueAt(rule, oldrow, oldcol);
                    }
                }
                catch(NullPointerException ex){

                }
            }
        } else {
            oldcol = col;
            oldrow = row;
        }
    }//GEN-LAST:event_posRulesTableKeyTyped

    private void updatePosRulesTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePosRulesTableButtonActionPerformed
        Vector values = new Vector();
        for(int row =0; row < 8;row ++){
            values.clear();
            values.add(posRulesTable.getValueAt(row, 1));
            values.add(posRulesTable.getValueAt(row, 2));
            values.add(posRulesTable.getValueAt(row, 3));
            values.add(posRulesTable.getValueAt(row, 4));
            values.add(posRulesTable.getValueAt(row, 5));
            lcsPosRules1.put((String)posRulesTable.getValueAt(row, 0), values);
            System.out.println(values);
        }
    }//GEN-LAST:event_updatePosRulesTableButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        Vector posValues = new Vector();
        String[] rows = {"Adjective","Adverb","Article","Conjunction",
                         "Interjection","Noun","Preposition","Pronoun","Verb"};
        lcsPosRules lcpr = lcsMain1.getPosRules();
        for(int row = 0; row < 8; row ++){
            posValues = (Vector)lcpr.get(rows[row]);
            System.out.println(rows[row]+", "+posValues.get(0));
            posRulesTable.setValueAt(((Boolean)posValues.get(4)).booleanValue(), row, 1);
            /*posRulesTable.setValueAt(posValues.get(2),row,2);
            posRulesTable.setValueAt(((Integer)posValues.get(3)).intValue(), row, 3);
            posRulesTable.setValueAt(Boolean.parseBoolean((String)posValues.get(4)), row, 4);
            posRulesTable.setValueAt(Boolean.parseBoolean((String)posValues.get(5)), row, 5);*/
            //posValues.clear();
        }
        syllablePatternField.setText(lcsMain1.getSyllableStructure().toString());
    }//GEN-LAST:event_formComponentShown

    public void setMain(lcs.lcsMain lcsm){
        lcsMain1=lcsm;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel conjugationLabel;
    private javax.swing.JTable conjugationTable;
    private javax.swing.JLabel declensionLabel;
    private javax.swing.JTable declensionTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private lcs.lcsMain lcsMain1;
    private lcs.model.lcsPosRules lcsPosRules1;
    private javax.swing.JLabel maxSyllablesLabel;
    private javax.swing.JSpinner maxSyllablesSpinner;
    private javax.swing.JLabel partOfSpeechLabel;
    private javax.swing.JTable posRulesTable;
    private javax.swing.JTextField syllablePatternField;
    private javax.swing.JLabel syllablePatternLabel;
    private javax.swing.JButton updatePosRulesTableButton;
    // End of variables declaration//GEN-END:variables
    private int oldrow;
    private int oldcol;
}
